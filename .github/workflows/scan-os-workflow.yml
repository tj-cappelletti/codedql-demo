name: Scan OS Workflows

on:
  workflow_dispatch:
    inputs:
      openSourceRepo:
        description: 'The open source workflow repository as {owner}/{repo} (ex: github/codeql-action)'
        required: true
      workflowTargetGhesUrl:
        description: 'URL of target workflow repository in GHES(ex: https://ghes.dev/targetGroup/targetRepo)'
        required: true
      branch:
        description: 'Branch name/version (if not default branch)'
        required: false

permissions: write-all

jobs:
  clone_repo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Print open source input
        run: echo "OS input is ${{ github.event.inputs.openSourceRepo }}"

      - name: Clone repository
        run: |
          # if version is not null, clone with version
          if [[ -n "${{ github.event.inputs.branch }}" ]]; then
            BRANCH="--branch ${{ github.event.inputs.branch }}"
          fi
          git clone --depth 1 $BRANCH https://github.com/${{ github.event.inputs.openSourceRepo }} 

  detect-lang:
    runs-on: ubuntu-latest
    outputs:
      linguist_languages: ${{ steps.linguist_languages.outputs.languages }}
      codeql_languages: ${{ steps.codeql_languages.outputs.languages }}
    steps:
    - id: linguist_languages
      run: echo "::set-output name=languages::$(gh api repos/${{ github.event.inputs.openSourceRepo }}/languages)"
    - id: codeql_languages
      # builds the list of languages which are both present in the repo and supported by CodeQL
      # remove from the dictionary the languages that should not be considered
      run: |
        echo "::set-output name=languages::$(gh api repos/${{ github.event.inputs.openSourceRepo }}/languages -q '[
        {"C":"cpp", "C++":"cpp", "C#":"csharp", "Go":"go", "Java":"java", "JavaScript":"javascript", 
        "TypeScript":"javascript", "Python":"python", "Ruby":"ruby"}[keys[]]] | unique | . -[null]' )"
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  codeql-analysis:
    needs: [detect-lang, clone_repo]
    # skip the analysis when the list of languages is empty
    if: needs.detect-lang.outputs.codeql_languages != '[]'
    runs-on: ubuntu-latest
    permissions: write-all

    strategy:
      fail-fast: false
      matrix:
        language: ${{ fromJSON(needs.detect-lang.outputs.codeql_languages) }}
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.openSourceRepo }}

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
    
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # perform the analysis
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
      with:
        upload: false
        output: ${{ runner.temp }}/codeql

    # find the application path in /opt/hostedtoolcache/CodeQL directory
    - name: Find CodeQL
      run: |
        export CODEQL_PATH=$(find /opt/hostedtoolcache/CodeQL -name codeql | head -n 1)
        $CODEQL_PATH/codeql database interpret-results --format=csv --output=${{ matrix.language }}-results.csv --print-diagnostics-summary --print-metrics-summary /home/runner/work/_temp/codeql_databases/${{ matrix.language }} /home/runner/work/_temp/codeql_databases/${{ matrix.language }}-queries-builtin.qls >> ${{ matrix.language }}_diagnostics

    - name: Print Diagnostics
      run: cat ${{ matrix.language }}_diagnostics

    - name: View context attributes
      uses: actions/github-script@v5
      with:
        script: console.log(context)

    # - name: Print issue Diagnostics
    #   uses: actions/github-script@v6
    #   with:
    #     script: |
    #       const body = `:white_check_mark: **Export Completed** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})` + '\n' + `CSVArtifactURL:[https://github.com/githubcustomers/AMEX-Actions-Scanning/suites/5351388886/artifacts/167463752]`
    #       const repoArray = context.payload.repository.full_name.split('/')
    #       const owner = repoArray[0]
    #       const repo = repoArray[1]
    #       const issue = github.rest.issues.create({
    #         owner: owner,
    #         repo: repo,
    #         title: 'CodeQL Analysis Results',
    #         body: body
    #       })
    
    - shell: bash
      run: ls -l ${{ runner.temp }}/codeql

    # output scan results as artifact
    - name: CodeQL Scan as artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.language }}-sarif
        path: ${{ runner.temp }}/codeql/${{ matrix.language }}.sarif

    # output csv results as artifact
    - name: CodeQL Scan as artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.language }}-csv
        path: ${{ matrix.language }}-results.csv

  # ghas_scan_repo:
  #   runs-on: ubuntu-latest
  #   needs: clone_repo
  #   steps:
  #     - name : Run GHAS scans on OS workflow repository
  #       run: echo "Running GHAS scans"
  #     - name: Log GHAS scans
  #       id: log_scans
  #       run: |
  #         echo "Logging GHAS scans"
  #         echo "::set-output name=scan_tests_passed::true"
  #   outputs:
  #     ghas_tests_passed: ${{steps.log_scans.outputs.scan_tests_passed}}

  # load_test_results_to_ghes:
  #   name: load_test_results_to_ghes
  #   runs-on: ubuntu-latest
  #   needs: ghas_scan_repo
  #   if: ${{ needs.ghas_scan_repo.outputs.ghas_tests_passed == 'true'}}
  #   steps:
  #     - name: load_test_results
  #       run: echo "Loading test results to GHES actions repo..."

  # load_test_results_to_ghec:
  #   name: load_test_results_to_ghec
  #   runs-on: ubuntu-latest
  #   needs: ghas_scan_repo
  #   if: ${{ needs.ghas_scan_repo.outputs.ghas_tests_passed == 'false'}}
  #   steps:
  #     - name: load_test_results
  #       run: echo "Loading test results to GHEC actions repo..."
